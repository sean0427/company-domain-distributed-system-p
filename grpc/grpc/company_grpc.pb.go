// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/company.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompanyHandlerClient is the client API for CompanyHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyHandlerClient interface {
	ListCompanies(ctx context.Context, in *CompanyQuery, opts ...grpc.CallOption) (*ListCompanyReply, error)
	GetCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyReply, error)
	CreateCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*MsgReply, error)
	UpdateCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyReply, error)
	DeleteCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*MsgReply, error)
}

type companyHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyHandlerClient(cc grpc.ClientConnInterface) CompanyHandlerClient {
	return &companyHandlerClient{cc}
}

func (c *companyHandlerClient) ListCompanies(ctx context.Context, in *CompanyQuery, opts ...grpc.CallOption) (*ListCompanyReply, error) {
	out := new(ListCompanyReply)
	err := c.cc.Invoke(ctx, "/CompanyHandler/ListCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyHandlerClient) GetCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyReply, error) {
	out := new(CompanyReply)
	err := c.cc.Invoke(ctx, "/CompanyHandler/GetCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyHandlerClient) CreateCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*MsgReply, error) {
	out := new(MsgReply)
	err := c.cc.Invoke(ctx, "/CompanyHandler/CreateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyHandlerClient) UpdateCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyReply, error) {
	out := new(CompanyReply)
	err := c.cc.Invoke(ctx, "/CompanyHandler/UpdateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyHandlerClient) DeleteCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*MsgReply, error) {
	out := new(MsgReply)
	err := c.cc.Invoke(ctx, "/CompanyHandler/DeleteCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyHandlerServer is the server API for CompanyHandler service.
// All implementations must embed UnimplementedCompanyHandlerServer
// for forward compatibility
type CompanyHandlerServer interface {
	ListCompanies(context.Context, *CompanyQuery) (*ListCompanyReply, error)
	GetCompany(context.Context, *CompanyRequest) (*CompanyReply, error)
	CreateCompany(context.Context, *CompanyRequest) (*MsgReply, error)
	UpdateCompany(context.Context, *CompanyRequest) (*CompanyReply, error)
	DeleteCompany(context.Context, *CompanyRequest) (*MsgReply, error)
	mustEmbedUnimplementedCompanyHandlerServer()
}

// UnimplementedCompanyHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyHandlerServer struct {
}

func (UnimplementedCompanyHandlerServer) ListCompanies(context.Context, *CompanyQuery) (*ListCompanyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanies not implemented")
}
func (UnimplementedCompanyHandlerServer) GetCompany(context.Context, *CompanyRequest) (*CompanyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompany not implemented")
}
func (UnimplementedCompanyHandlerServer) CreateCompany(context.Context, *CompanyRequest) (*MsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompany not implemented")
}
func (UnimplementedCompanyHandlerServer) UpdateCompany(context.Context, *CompanyRequest) (*CompanyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompany not implemented")
}
func (UnimplementedCompanyHandlerServer) DeleteCompany(context.Context, *CompanyRequest) (*MsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompany not implemented")
}
func (UnimplementedCompanyHandlerServer) mustEmbedUnimplementedCompanyHandlerServer() {}

// UnsafeCompanyHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyHandlerServer will
// result in compilation errors.
type UnsafeCompanyHandlerServer interface {
	mustEmbedUnimplementedCompanyHandlerServer()
}

func RegisterCompanyHandlerServer(s grpc.ServiceRegistrar, srv CompanyHandlerServer) {
	s.RegisterService(&CompanyHandler_ServiceDesc, srv)
}

func _CompanyHandler_ListCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyHandlerServer).ListCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyHandler/ListCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyHandlerServer).ListCompanies(ctx, req.(*CompanyQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyHandler_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyHandlerServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyHandler/GetCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyHandlerServer).GetCompany(ctx, req.(*CompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyHandler_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyHandlerServer).CreateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyHandler/CreateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyHandlerServer).CreateCompany(ctx, req.(*CompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyHandler_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyHandlerServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyHandler/UpdateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyHandlerServer).UpdateCompany(ctx, req.(*CompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyHandler_DeleteCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyHandlerServer).DeleteCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyHandler/DeleteCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyHandlerServer).DeleteCompany(ctx, req.(*CompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyHandler_ServiceDesc is the grpc.ServiceDesc for CompanyHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CompanyHandler",
	HandlerType: (*CompanyHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCompanies",
			Handler:    _CompanyHandler_ListCompanies_Handler,
		},
		{
			MethodName: "GetCompany",
			Handler:    _CompanyHandler_GetCompany_Handler,
		},
		{
			MethodName: "CreateCompany",
			Handler:    _CompanyHandler_CreateCompany_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _CompanyHandler_UpdateCompany_Handler,
		},
		{
			MethodName: "DeleteCompany",
			Handler:    _CompanyHandler_DeleteCompany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/company.proto",
}
